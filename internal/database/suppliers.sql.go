// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: suppliers.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers(
    id, name, email, description, phone, country, created_at, updated_at
) 
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, email, description, phone, country, created_at, updated_at
`

type CreateSupplierParams struct {
	ID          uuid.UUID
	Name        string
	Email       sql.NullString
	Description sql.NullString
	Phone       sql.NullString
	Country     sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, createSupplier,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Description,
		arg.Phone,
		arg.Country,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Phone,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM suppliers WHERE id=$1
`

func (q *Queries) DeleteSupplier(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, id)
	return err
}

const getAllSuppliers = `-- name: GetAllSuppliers :many
SELECT id, name, email, description, phone, country, created_at, updated_at FROM suppliers
`

func (q *Queries) GetAllSuppliers(ctx context.Context) ([]Supplier, error) {
	rows, err := q.db.QueryContext(ctx, getAllSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Supplier
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Description,
			&i.Phone,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSupplierById = `-- name: GetSupplierById :one
SELECT id, name, email, description, phone, country, created_at, updated_at FROM suppliers WHERE id=$1
`

func (q *Queries) GetSupplierById(ctx context.Context, id uuid.UUID) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, getSupplierById, id)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Phone,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE suppliers
SET 
name = $2,
email = $3,
description = $4,
phone = $5,
country = $6,
updated_at = $7
WHERE id = $1
RETURNING id, name, email, description, phone, country, created_at, updated_at
`

type UpdateSupplierParams struct {
	ID          uuid.UUID
	Name        string
	Email       sql.NullString
	Description sql.NullString
	Phone       sql.NullString
	Country     sql.NullString
	UpdatedAt   time.Time
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRowContext(ctx, updateSupplier,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Description,
		arg.Phone,
		arg.Country,
		arg.UpdatedAt,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Phone,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
