// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(
    id,
    name,
    description,
    price,
    stock_level,
    category_id,
    supplier_id,
    sku,
    created_at,
    updated_at
)
VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, description, price, stock_level, category_id, supplier_id, sku, created_at, updated_at
`

type CreateProductParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Price       int32
	StockLevel  sql.NullInt32
	CategoryID  uuid.NullUUID
	SupplierID  uuid.NullUUID
	Sku         sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.StockLevel,
		arg.CategoryID,
		arg.SupplierID,
		arg.Sku,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockLevel,
		&i.CategoryID,
		&i.SupplierID,
		&i.Sku,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, stock_level, category_id, supplier_id, sku, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockLevel,
		&i.CategoryID,
		&i.SupplierID,
		&i.Sku,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, description, price, stock_level, category_id, supplier_id, sku, created_at, updated_at FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.StockLevel,
			&i.CategoryID,
			&i.SupplierID,
			&i.Sku,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
name = $2,
description = $3,
price = $4,
stock_level = $5,
category_id = $6,
supplier_id = $7,
sku = $8,
updated_at = $9
WHERE id = $1
RETURNING id, name, description, price, stock_level, category_id, supplier_id, sku, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Price       int32
	StockLevel  sql.NullInt32
	CategoryID  uuid.NullUUID
	SupplierID  uuid.NullUUID
	Sku         sql.NullString
	UpdatedAt   sql.NullTime
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.StockLevel,
		arg.CategoryID,
		arg.SupplierID,
		arg.Sku,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.StockLevel,
		&i.CategoryID,
		&i.SupplierID,
		&i.Sku,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
